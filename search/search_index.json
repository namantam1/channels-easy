{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"channels-easy A thin wrapper around channel consumers to make things EASY . Installation To get the latest stable release from PyPi pip install channels-easy To get the latest commit from GitHub pip install -e git+git://github.com/namantam1/channels-easy.git#egg=channels-easy As channels-easy is a thin wrapper around channels so channels must be in your INSTALLED_APPS in settings.py . INSTALLED_APPS = ( ..., 'channels', ) Usage All the naming convention used to implement this library is inspired from socket.io to make server implementation simple. # consumers.py from channels_easy.generic import AsyncWebsocketConsumer class NewConsumer(AsyncWebsocketConsumer): async def connect(self): # join room on connect await self.join(\"room1\") await self.accept() async def disconnect(self, close_code): # Leave room on disconnect await self.leave(\"room1\") async def on_message(self, data): print(\"message from client\", data) await self.emit(\"message\", \"room1\", {\"message\": \"hello from server\"}) Contribute If you want to contribute to this project, please perform the following steps # Fork this repository # Clone your fork poetry install git checkout -b feature_branch master # Implement your feature and tests git add . && git commit git push -u origin feature_branch # Send us a pull request for your feature branch","title":"Home"},{"location":"#channels-easy","text":"A thin wrapper around channel consumers to make things EASY .","title":"channels-easy"},{"location":"#installation","text":"To get the latest stable release from PyPi pip install channels-easy To get the latest commit from GitHub pip install -e git+git://github.com/namantam1/channels-easy.git#egg=channels-easy As channels-easy is a thin wrapper around channels so channels must be in your INSTALLED_APPS in settings.py . INSTALLED_APPS = ( ..., 'channels', )","title":"Installation"},{"location":"#usage","text":"All the naming convention used to implement this library is inspired from socket.io to make server implementation simple. # consumers.py from channels_easy.generic import AsyncWebsocketConsumer class NewConsumer(AsyncWebsocketConsumer): async def connect(self): # join room on connect await self.join(\"room1\") await self.accept() async def disconnect(self, close_code): # Leave room on disconnect await self.leave(\"room1\") async def on_message(self, data): print(\"message from client\", data) await self.emit(\"message\", \"room1\", {\"message\": \"hello from server\"})","title":"Usage"},{"location":"#contribute","text":"If you want to contribute to this project, please perform the following steps # Fork this repository # Clone your fork poetry install git checkout -b feature_branch master # Implement your feature and tests git add . && git commit git push -u origin feature_branch # Send us a pull request for your feature branch","title":"Contribute"},{"location":"apis/","text":"API Reference channels_easy.generic.AsyncWebsocketConsumer ( AsyncWebsocketConsumer ) close_with_error(self, error_data, code=None) async Close socket after emitting error message Parameters: error_data ( Any ) \u2013 Any json serializable data code ( int ) \u2013 Close code pass to close emit(self, typ, to, data) async Send message to given rooms Parameters: typ ( str ) \u2013 message type to ( Union[str, Iterable] ) \u2013 List of rooms or a single room data ( Any ) \u2013 data which is json serializable emit_error(self, data) async Emit message with error type and data Parameters: data ( Any ) \u2013 Any json serializable value join(self, room) async Join room with passed name Parameters: room ( Union[str, Iterable] ) \u2013 List of room or a single room leave(self, room) async Leave room with passed name Parameters: room ( Union[str, Iterable] ) \u2013 List of room or a single room","title":"API Reference"},{"location":"apis/#api-reference","text":"","title":"API Reference"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer","text":"","title":"AsyncWebsocketConsumer"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer.close_with_error","text":"Close socket after emitting error message Parameters: error_data ( Any ) \u2013 Any json serializable data code ( int ) \u2013 Close code pass to close","title":"close_with_error()"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer.emit","text":"Send message to given rooms Parameters: typ ( str ) \u2013 message type to ( Union[str, Iterable] ) \u2013 List of rooms or a single room data ( Any ) \u2013 data which is json serializable","title":"emit()"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer.emit_error","text":"Emit message with error type and data Parameters: data ( Any ) \u2013 Any json serializable value","title":"emit_error()"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer.join","text":"Join room with passed name Parameters: room ( Union[str, Iterable] ) \u2013 List of room or a single room","title":"join()"},{"location":"apis/#channels_easy.generic.AsyncWebsocketConsumer.leave","text":"Leave room with passed name Parameters: room ( Union[str, Iterable] ) \u2013 List of room or a single room","title":"leave()"}]}